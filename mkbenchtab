#!/usr/bin/python
import sys
import re

BENCH_PATTERN = re.compile(r'''
    ^test\ ([A-Za-z_][A-Za-z0-9_]*)::strategy::([A-Za-z_][A-Za-z0-9_]*)::bench_([A-Za-z0-9_]+)\ *
    \.\.\.\ +bench:\ *([0-9]+)\ ns/iter\ \(\+/-\ ([0-9]+)\)
''', re.X)

benches = {} # [category][strategy][column]
best = {} # [category][column]
for line in sys.stdin:
    m = BENCH_PATTERN.match(line)
    if not m: continue

    category, strategy, column, avg, std = m.groups()
    avg = int(avg)
    std = int(std)

    benches.setdefault(category, {}).setdefault(strategy, {})[column] = '%s (%s)' % (avg, std)
    bestpercol = best.setdefault(category, {})
    if column not in bestpercol or bestpercol[column][0] > avg:
        bestpercol[column] = avg, strategy

for category, columns in best.items():
    for column, (_, strategy) in columns.items():
        benches[category][strategy][column] = '**%s**' % benches[category][strategy][column]

def natural_key(key):
    return [int(i) if i.isdigit() else i.lower() for i in re.split(r'([0-9]+)', key)]

for category, rows in benches.items():
    print '## `%s`' % category
    columns = list(set().union(*[i.keys() for i in rows.values()]))
    columns.sort(key=natural_key)
    print 'Strategy | %s' % ' | '.join('`%s`' % i for i in columns)
    print '---------|-%s' % '-|-'.join('-%s-' % ('-'*len(i)) for i in columns)
    rows = list(rows.items())
    rows.sort(key=lambda (k,_): (not k.lower().startswith('naive'), natural_key(k))) # naive first
    for strategy, results in rows:
        print '`%s` | %s' % (strategy, ' | '.join(results.get(i, 'N/A') for i in columns))
    print

